{"version":3,"sources":["components/CardPlanets.js","components/PlanetList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["CardPlanets","_ref","name","rotation_period","orbital_period","climate","gravity","population","terrain","react_default","a","createElement","className","PlanetList","planets","map","_ref2","components_CardPlanets","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","searchfield","target","value","state","_this2","Promise","all","asyncToGenerator","regenerator_default","mark","_callee","url","response","morePlanets","combinedArrayOfPlanets","sortedArrayOfPlanets","wrap","_context","prev","next","fetch","sent","json","push","results","flat","sort","b","localeCompare","stop","_x","apply","arguments","catch","error","console","log","_this$state","filteredPlanets","filter","planet","toLowerCase","includes","length","components_SearchBox","components_Scroll","components_PlanetList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b22e2944.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst CardPlanets = ({ name, rotation_period, orbital_period, climate, gravity, population, terrain }) => {\r\n\treturn (\r\n\t\t<div className=\"tc bg-yellow dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n\t\t\t<h2>{name}</h2>\r\n            <p><strong>Rotation Period:</strong> {rotation_period}</p>\r\n            <p><strong>Orbital Period:</strong> {orbital_period}</p>\r\n            <p><strong>Climate:</strong> {climate}</p>\r\n            <p><strong>Gravity:</strong> {gravity}</p>\r\n            <p><strong>Terrain:</strong> {terrain}</p>\r\n            <p><strong>Population:</strong> {population}</p>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default CardPlanets;","import React from 'react';\r\nimport CardPlanets from './CardPlanets';\r\n\r\nconst PlanetList = ({ planets }) => {\r\n    return (\r\n        <div>\r\n            {planets.map(({ name, rotation_period, orbital_period, climate, gravity, terrain, population }) => \r\n                <CardPlanets key={name} name ={name} rotation_period ={rotation_period}\r\n                             orbital_period ={orbital_period} climate ={climate} gravity ={gravity}\r\n                             terrain ={terrain} population ={population}/>)}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PlanetList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n\treturn (\r\n\t\t<div className='pa2'>\r\n\t\t\t<input\r\n\t\t\t\tclassName='pa3 ba b--yellow bg-black yellow'\r\n\t\t\t\ttype='search'\r\n\t\t\t\tplaceholder='Search...'\r\n\t\t\t\tonChange={searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style={{overflowY: 'scroll', height: '800px' }} >\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport PlanetList from '../components/PlanetList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\tconstructor() {\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\tplanets: [],\r\n\t\t\tsearchfield: ''\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tconst urls = [\r\n\t\t\t'https://swapi.co/api/planets/',\r\n\t\t\t'https://swapi.co/api/planets/?page=2', \r\n\t\t\t'https://swapi.co/api/planets/?page=3',\r\n\t\t\t'https://swapi.co/api/planets/?page=4',\r\n\t\t\t'https://swapi.co/api/planets/?page=5',\r\n\t\t\t'https://swapi.co/api/planets/?page=6',\r\n\t\t\t'https://swapi.co/api/planets/?page=7'\r\n\t\t]\r\n\t\t\r\n\t\tPromise.all(urls.map(async url => {\r\n\t\t\tconst response = await fetch(url);\r\n\t\t\tconst morePlanets = await response.json();\r\n\t\t\tvar combinedArrayOfPlanets = this.state.planets;\r\n\t\t\tcombinedArrayOfPlanets.push(morePlanets.results);\r\n\t\t\t\r\n\t\t\tvar sortedArrayOfPlanets = combinedArrayOfPlanets\r\n\t\t\t\t.flat()\r\n\t\t\t\t.sort((a, b) => a.name.localeCompare(b.name));\r\n\t\t\t\r\n\t\t\tthis.setState({planets: sortedArrayOfPlanets})\r\n\t\t}))\r\n\t\t.catch(error => \r\n\t\t\tconsole.log('Error during fetching of planets:', error)\r\n\t\t);\r\n\t}\r\n\tonSearchChange = (event) => {\r\n\t\tthis.setState({ searchfield: event.target.value })\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { planets, searchfield } = this.state;\r\n\t\tconst filteredPlanets = planets.filter(planet => planet.name.toLowerCase().includes(searchfield.toLowerCase()));\r\n\t\t\treturn !planets.length ?\r\n\t\t\t\t<h1 className='tc yellow f-subheadline'>Loading ...</h1> :\r\n\t\t\t\t(\r\n\t\t\t\t\t<div className='tc'>\r\n\t\t\t\t\t\t<h1 className='f-subheadline yellow'>Star Wars</h1>\r\n\t\t\t\t\t\t<h2 className='f1 black'>The Planets</h2>\t\r\n\t\t\t\t\t\t<SearchBox searchChange={this.onSearchChange}/><br/>\r\n\t\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t\t\t<br/><PlanetList planets={filteredPlanets}/>\r\n\t\t\t\t\t\t</Scroll>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}